name: Promote to TST (Helm)

on:
  workflow_run:
    workflows: ["DeviceRegistrationAPI CI", "StatisticsAPI CI"]
    types: [completed]

permissions:
  contents: write
  pull-requests: write

jobs:
  update-values:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    env:
      DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
      DOCKER_HUB_TOKEN: ${{ secrets.DOCKER_HUB_TOKEN }}
      GITHUB_OWNER: ${{ github.repository_owner }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker login (optional)
        if: ${{ env.DOCKER_HUB_USERNAME != '' && env.DOCKER_HUB_TOKEN != '' }}
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_HUB_USERNAME }}
          password: ${{ env.DOCKER_HUB_TOKEN }}

      - name: Install yq
        shell: bash
        run: |
          sudo curl -L "https://github.com/mikefarah/yq/releases/download/v4.43.1/yq_linux_amd64" -o /usr/local/bin/yq
          sudo chmod +x /usr/local/bin/yq

      - name: Resolve image digests and update Helm values (tst)
        id: update-values
        shell: bash
        run: |
          set -euo pipefail
          SHA="${{ github.event.workflow_run.head_sha }}"
          SHORT_SHA="${SHA:0:7}"
          # Determine Docker org: prefer DOCKER_HUB_USERNAME, fallback to GitHub owner
          USER="${DOCKER_HUB_USERNAME:-}"
          if [ -z "$USER" ]; then
            USER="${GITHUB_OWNER}"
          fi

          # Resolve digests for images tagged by service CI.
          # docker/metadata-action@v5 with 'type=sha' produces tags like: sha-<shortsha>
          # We'll try in order: sha-<shortsha>, <fullsha>, <shortsha>
          STAT_CANDIDATES=(
            "docker.io/${USER}/statistics-api:sha-${SHORT_SHA}"
            "docker.io/${USER}/statistics-api:${SHA}"
            "docker.io/${USER}/statistics-api:${SHORT_SHA}"
          )
          DEV_CANDIDATES=(
            "docker.io/${USER}/device-registration-api:sha-${SHORT_SHA}"
            "docker.io/${USER}/device-registration-api:${SHA}"
            "docker.io/${USER}/device-registration-api:${SHORT_SHA}"
          )

          # Try to resolve digests with retries; registry propagation can lag.
          resolve_digest() {
            local img; local tries=6; local sleep_s=10
            for img in "$@"; do
              for ((i=1; i<=tries; i++)); do
                DIG=$(docker buildx imagetools inspect "$img" --format '{{json .Manifest.Digest}}' 2>/dev/null | tr -d '"')
                if [ -n "$DIG" ]; then
                  echo "$DIG|$img"
                  return 0
                fi
                echo "Digest not available yet for $img (attempt $i/$tries). Retrying in ${sleep_s}s..." >&2
                sleep "$sleep_s"
              done
            done
            return 1
          }

          set +e
          RES_STAT=$(resolve_digest "${STAT_CANDIDATES[@]}")
          STAT_RC=$?
          RES_DEV=$(resolve_digest "${DEV_CANDIDATES[@]}")
          DEV_RC=$?
          set -e

          STAT_DIGEST_FULL=""; STAT_SRC=""; STAT_FALLBACK="false"
          if [ "$STAT_RC" -eq 0 ] && [ -n "$RES_STAT" ]; then
            STAT_DIGEST_FULL="${RES_STAT%%|*}"
            STAT_SRC="${RES_STAT#*|}"
          else
            echo "::warning::Could not resolve digest for any of: ${STAT_CANDIDATES[*]}. Trying fallback :latest (mutable) for statisticsapi." >&2
            RES_STAT=$(resolve_digest "docker.io/${USER}/statistics-api:latest") || true
            if [ -n "$RES_STAT" ]; then
              STAT_DIGEST_FULL="${RES_STAT%%|*}"
              STAT_SRC="${RES_STAT#*|}"
              STAT_FALLBACK="true"
            else
              echo "::warning::Fallback :latest also unavailable for statisticsapi. Skipping update." >&2
            fi
          fi
          DEV_DIGEST_FULL=""; DEV_SRC=""; DEV_FALLBACK="false"
          if [ "$DEV_RC" -eq 0 ] && [ -n "$RES_DEV" ]; then
            DEV_DIGEST_FULL="${RES_DEV%%|*}"
            DEV_SRC="${RES_DEV#*|}"
          else
            echo "::warning::Could not resolve digest for any of: ${DEV_CANDIDATES[*]}. Trying fallback :latest (mutable) for deviceregapi." >&2
            RES_DEV=$(resolve_digest "docker.io/${USER}/device-registration-api:latest") || true
            if [ -n "$RES_DEV" ]; then
              DEV_DIGEST_FULL="${RES_DEV%%|*}"
              DEV_SRC="${RES_DEV#*|}"
              DEV_FALLBACK="true"
            else
              echo "::warning::Fallback :latest also unavailable for deviceregapi. Skipping update." >&2
            fi
          fi

          # Strip sha256: prefix for our Helm values (template prepends it)
          STAT_DIGEST=${STAT_DIGEST_FULL#sha256:}
          DEV_DIGEST=${DEV_DIGEST_FULL#sha256:}

          [ -n "$STAT_DIGEST_FULL" ] && echo "Resolved statistics-api digest: ${STAT_DIGEST_FULL} (from ${STAT_SRC})${STAT_FALLBACK:+ [FALLBACK]}" || true
          [ -n "$DEV_DIGEST_FULL" ] && echo "Resolved device-registration-api digest: ${DEV_DIGEST_FULL} (from ${DEV_SRC})${DEV_FALLBACK:+ [FALLBACK]}" || true

          # Expose outputs for later steps (PR body)
          [ -n "$STAT_DIGEST_FULL" ] && echo "STAT_DIGEST=${STAT_DIGEST}" >> "$GITHUB_OUTPUT" || true
          [ -n "$DEV_DIGEST_FULL" ] && echo "DEV_DIGEST=${DEV_DIGEST}" >> "$GITHUB_OUTPUT" || true
          echo "STAT_FALLBACK=${STAT_FALLBACK}" >> "$GITHUB_OUTPUT"
          echo "DEV_FALLBACK=${DEV_FALLBACK}" >> "$GITHUB_OUTPUT"
          echo "DOCKER_ORG=${USER}" >> "$GITHUB_OUTPUT"

          # Update values/tst.yaml using yq
          if [ -n "$STAT_DIGEST_FULL" ]; then
            yq -i '.statisticsapi.image.repository = "'"${USER}/statistics-api"'"' infrastructure/helm/lbsite/values/tst.yaml
            yq -i '.statisticsapi.image.digest = "'"${STAT_DIGEST}"'"' infrastructure/helm/lbsite/values/tst.yaml
            yq -i 'del(.statisticsapi.image.tag)' infrastructure/helm/lbsite/values/tst.yaml
          fi

          if [ -n "$DEV_DIGEST_FULL" ]; then
            yq -i '.deviceregapi.image.repository = "'"${USER}/device-registration-api"'"' infrastructure/helm/lbsite/values/tst.yaml
            yq -i '.deviceregapi.image.digest = "'"${DEV_DIGEST}"'"' infrastructure/helm/lbsite/values/tst.yaml
            yq -i 'del(.deviceregapi.image.tag)' infrastructure/helm/lbsite/values/tst.yaml
          fi

      - name: Detect changes
        id: diff
        run: |
          git add infrastructure/helm/lbsite/values/tst.yaml
          if git diff --cached --quiet; then
            echo "changed=false" >> $GITHUB_OUTPUT
          else
            echo "changed=true" >> $GITHUB_OUTPUT
          fi

      - name: Create Pull Request for TST values update
        uses: peter-evans/create-pull-request@v6
        if: steps.diff.outputs.changed == 'true'
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "ci(helm): promote TST values to digests for sha:${{ github.event.workflow_run.head_sha }}"
          title: "Promote TST to digests for sha:${{ github.event.workflow_run.head_sha }}"
          body: |
            This PR updates TST Helm values to deploy images (pinned by digest) built from CI commit `${{ github.event.workflow_run.head_sha }}`:
            - statisticsapi: `${{ steps.update-values.outputs.DOCKER_ORG }}/statistics-api@sha256:${{ steps.update-values.outputs.STAT_DIGEST }}`
            - deviceregapi: `${{ steps.update-values.outputs.DOCKER_ORG }}/device-registration-api@sha256:${{ steps.update-values.outputs.DEV_DIGEST }}`
          branch: ci/promote-tst-${{ github.event.workflow_run.head_sha }}
          base: main
          add-paths: |
            infrastructure/helm/lbsite/values/tst.yaml
          labels: |
            ci
            promote-tst
